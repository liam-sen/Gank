apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def keyStore = file('gank.jks')

repositories {
    flatDir {
        dirs 'libs'
    }
}

android {

    compileSdkVersion rootProject.ext.androidCompileSdkVersion

    defaultConfig {
        applicationId rootProject.ext.androidApplicationId
        minSdkVersion rootProject.ext.androidMinSdkVersion
        targetSdkVersion rootProject.ext.androidTargetSdkVersion
        versionCode rootProject.ext.androidVersionCode
        versionName rootProject.ext.androidVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'              //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'MissingTranslation'
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    signingConfigs {
        release {
            storeFile keyStore
            storePassword 'gank666'
            keyAlias 'Gank'
            keyPassword '94a186'
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if(keyStore.exists()) {
                println "using johnnyshieh's key"
                signingConfig signingConfigs.release
            }
//            applicationVariants.all { variant ->
//                if (variant.buildType.name.equals('release')) {
//                    variant.outputs.each { output ->
//                        def outputFile = output.outputFile
//                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                            def fileName = "Gank_v${defaultConfig.versionName}_${releaseTime()}_${variant.flavorName}.apk"
//                            output.outputFile = new File(outputFile.parent, fileName)
//                        }
//                    }
//                }
//            }

        }

    }
}

def dependency = rootProject.ext.dependencies

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    annotationProcessor dependency['daggerCompiler']
    testImplementation dependency['junit']
    implementation dependency['appcompat']
    implementation dependency['design']
    implementation dependency['recyclerView']
    implementation dependency['cardView']
    implementation dependency['dagger']
    implementation dependency['butterKnife']
    annotationProcessor dependency['butterKnifCompiler']
    implementation dependency['rxJava']
    implementation dependency['rxAndroid']
    implementation dependency['rxflux']
    implementation dependency['retrofit']
    implementation dependency['converterGson']
    implementation dependency['adapterRxjava']
    implementation dependency['gson']
    implementation dependency['glide']
    implementation dependency['timber']
    implementation dependency['logger']
    debugImplementation dependency['leakcanary']
    releaseImplementation dependency['leakcanaryNoOp']
    compileOnly dependency['javaxAnnotation']
}
